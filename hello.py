import streamlit as st
from sidebar import sidebar_chat_manager

# CSS
with open("styles.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
# Custom CSS for wider text area
st.markdown("""
    <style>
    .big-textbox textarea {
        width: 100% !important;
        min-width: 500px !important;
    }
    </style>
""", unsafe_allow_html=True)

# Sidebar
sidebar_chat_manager()

# Sync messages with current chat
if "chats" in st.session_state and "current_chat" in st.session_state:
    st.session_state.messages = st.session_state.chats[st.session_state.current_chat]

# Welcome block 
with st.container(key="welcome-to-chatbot"):
    st.markdown(
        """
        <div style='text-align: center;'>
            <img src="https://upload.wikimedia.org/wikipedia/commons/b/b8/TD_Securities_logo.svg" width="300">
            <h2>Welcome to DCM AI Chatbot</h2>
            <p>You are responsible for any output generated by your use of this generative AI powered tool. 
            <br>This means you must validate the content it produces for you and confirm that it is permitted to be used for your purpose prior to any business use, in compliance with any legal, regulatory, attribution or other requirements.</p>
            <p>You may direct Compliance questions to <b>tdsaimlhub@tdsecurities.com</b>
            <br>For app related questions, please reach out to <b>tdsaimlhub@tdsecurities.com</b></p>
        </div>
        """,
        unsafe_allow_html=True
    )

# Messages container
with st.container():
    st.markdown('<div id="chat-scroll">', unsafe_allow_html=True)
    for msg in st.session_state.messages:
        role = msg["role"]
        bubble_color = "#00742A" if role == "user" else "#3ca1ff"
        align = "right" if role == "user" else "left"

        st.markdown(f"""
        <div class="chat-message" style='text-align: {align};'>
            <div class="chat-bubble" style='background: {bubble_color};'>
                {msg["content"]}
            </div>
        </div>
        """, unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

# Input form
st.markdown("""
    <style>
    /* Remove border/shadow/padding around the form container */
    div[data-testid="stForm"] {
        border: none !important;
        box-shadow: none !important;
        background-color: transparent !important;
        padding: 0 !important;
        margin: 0 !important;
    }
    </style>
""", unsafe_allow_html=True)
with st.container(key="user-input-container"):
    with st.form("chat_form", clear_on_submit=True):

        col1, col2 = st.columns([10, 1])
        
        with col1:
            user_input = st.text_area(label="", height=100, label_visibility="collapsed")

        with col2:
            submitted = st.form_submit_button("ðŸ“¤")

        MAX_CHARS = 15000
        char_count = len(user_input)
        st.markdown(f"<div class='char-count'>{char_count}/{MAX_CHARS}</div>", unsafe_allow_html=True)
        if char_count > MAX_CHARS:
            st.warning("Character limit exceeded!")

        if submitted and user_input.strip():
            msg = {"role": "user", "content": user_input.strip()}
            current_chat = st.session_state.current_chat
            st.session_state.chats[current_chat].append(msg)
            st.session_state.chats[current_chat].append(
                {"role": "assistant", "content": "This is a sample response."}
            )

        # Rename chat to first prompt if there is the first message 
            if current_chat.startswith("Chat") and len(st.session_state.chats[current_chat]) == 2:
                # Trim the prompt to the first 40 letters 
                prompt_snippet = user_input.strip().split("\n")[0][:40]
                prompt_snippet = prompt_snippet if prompt_snippet else "Untitled"
                new_chat_name = prompt_snippet.strip()

                # For the new chats we make
                count = 1
                while new_chat_name in st.session_state.chats:
                    new_chat_name = f"{prompt_snippet.strip()} ({count})"
                    count += 1

                # Rename the chat
                st.session_state.chats[new_chat_name] = st.session_state.chats.pop(current_chat)
                st.session_state.current_chat = new_chat_name
            st.rerun()


    st.write("Artificial intelligence can make mistakes. Fact-check important information before using. Read our disclaimer here.")
