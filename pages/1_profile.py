import streamlit as st

# CSS Sheet
with open("styles.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# Welcome block 
with st.container(key="welcome-to-chatbot"):
    st.markdown(
        """
        <div style='text-align: center;'>
            <img src="https://upload.wikimedia.org/wikipedia/commons/b/b8/TD_Securities_logo.svg" width="300">
            <h2>Welcome to Front Office Assistant.</h2>
            <p>You are responsible for any output generated by your use of this generative AI powered tool. 
            <br>This means you must validate the content it produces for you and confirm that it is permitted to be used for your purpose prior to any business use, in compliance with any legal, regulatory, attribution or other requirements.</p>
            <p>You may direct Compliance questions to <b>TDSecuritiesyayadada.com</b>
            <br>For app related questions, please reach out to <b>TDSecuritiesyayadada.com</b></p>
        </div>
        """,
        unsafe_allow_html=True
    )

# Check if has messages
if "messages" not in st.session_state:
    st.session_state.messages = []

# Messages 
with st.container():
    # Chatbox to scroll through
    st.markdown('<div id="chat-scroll">', unsafe_allow_html=True)
    # Going through session state array 
    for msg in st.session_state.messages:

        # Role assigning
        role = msg["role"]
        bubble_color = "#00742A" if role == "user" else "#3ca1ff"
        if role == "user":
            align = "right" 
        else: 
            align = "left"

        st.markdown(f"""
        <div class="chat-message" style='text-align: {align};'>
            <div class="chat-bubble" style='background: {bubble_color};'>
                {msg["content"]}
            </div>
        </div>
        """, unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

# User input bar
with st.container(key="user-input-container"):
    with st.form("chat_form", clear_on_submit=True):

        # Research Chat or Market Data radio 
        options = ["Research Chat", "Market Data"] 
        chat_type = st.radio("", options=options, horizontal=True, label_visibility="collapsed")

        # User input
        user_input = st.text_area(label="", height=100, label_visibility="collapsed")
        submitted = st.form_submit_button("Send")

        MAX_CHARS = 15000
        char_count = len(user_input)
        st.markdown(f"<div class='char-count'>{char_count}/{MAX_CHARS}</div>", unsafe_allow_html=True)
        if char_count > MAX_CHARS:
            st.warning("Character limit exceeded!")

        if submitted and user_input.strip():
            st.session_state.messages.append({"role": "user", "content": user_input.strip()})
            # Mock response  ( to later implement )
            st.session_state.messages.append({"role": "assistant", "content": "This is a sample response."})
            st.rerun() # Two avoid double tapping the send button 
            # Disclaimer
    st.write(
        "Artificial intelligence can make mistakes. Fact-check important information before using. Read our disclaimer here."
    )
    
